#  Description: Create a graph from an input file and complete topological sort

#  Date Created: 5/1/2019

#  Date Last Modified: 5/3/2019

class Stack (object):
  def __init__ (self):
    self.stack = []

  # add an item to the top of the stack
  def push (self, item):
    self.stack.append (item)

  # remove an item from the top of the stack
  def pop (self):
    return self.stack.pop()

  # check the item on the top of the stack
  def peek (self):
    return self.stack[-1]

  # check if the stack is empty
  def is_empty (self):
    return (len (self.stack) == 0)

  # return the number of elements in the stack
  def size (self):
    return (len (self.stack))


class Queue (object):
  def __init__ (self):
    self.queue = []

  # add an item to the end of the queue
  def enqueue (self, item):
    self.queue.append (item)

  # remove an item from the beginning of the queue
  def dequeue (self):
    return (self.queue.pop(0))

  # check if the queue is empty
  def is_empty (self):
    return (len (self.queue) == 0)

  # return the size of the queue
  def size (self):
    return (len (self.queue))


class Vertex (object):
  def __init__ (self, label):
    self.label = label
    self.visited = False

  # determine if a vertex was visited
  def was_visited (self):
    return self.visited

  # determine the label of the vertex
  def get_label (self):
    return self.label

  # string representation of the vertex
  def __str__ (self):
    return str (self.label)


class Graph (object):
  def __init__ (self):
    self.Vertices = []      # list of Vertex objects
    self.adjMat = []        # adjacency matrix

  # check if a vertex is already in the graph
  def has_vertex (self, label):
    nVert = len (self.Vertices)
    for i in range (nVert):
      if (label == (self.Vertices[i]).get_label()):
        return True
    return False

  # given a label get the index of a vertex
  def get_index (self, label):
    nVert = len (self.Vertices)
    for i in range (nVert):
      if (label == (self.Vertices[i]).get_label()):
        return i
    return -1

  # add a Vertex with a given label to the graph
  def add_vertex (self, label):
    if (not self.has_vertex(label)):
      self.Vertices.append (Vertex (label))
      
      # add a new column in the adjacency matrix
      nVert = len (self.Vertices)
      for i in range (nVert - 1):
        (self.adjMat[i]).append(0)

      # add a new row for the new Vertex
      new_row = []
      for i in range (nVert):
        new_row.append (0)
      self.adjMat.append (new_row)

  # add weighted directed edge to graph
  def add_directed_edge (self, start, finish, weight = 1):
    self.adjMat[start][finish] = weight

  # add weighted undirected edge to graph
  def add_undirected_edge (self, start, finish, weight = 1):
    self.adjMat[start][finish] = weight
    self.adjMat[finish][start] = weight

  # return an unvisited vertex adjacent to vertex v (index)
  def get_adj_unvisited_vertex (self, v):
    nVert = len(self.Vertices)
    for i in range (nVert):
      if (self.adjMat[v][i] > 0) and (not (self.Vertices[i]).was_visited()):
        return i
    return -1

  # do the depth first search in a graph
  def dfs (self, v):
    # create the Stack
    theStack = Stack()

    # mark the vertex v as visited and push it on the stack
    (self.Vertices[v]).visited = True
    print (self.Vertices[v])
    theStack.push (v)

    # visit the other vertices according to depth
    while (not theStack.is_empty()):
      # get an adjacent unvisited vertex
      u = self.get_adj_unvisited_vertex (theStack.peek())
      if (u == -1): 
        u = theStack.pop()
      else:
        (self.Vertices[u]).visited = True
        print (self.Vertices[u])
        theStack.push (u)

    # the stack is empty, let us reset the flags
    nVert = len(self.Vertices)
    for i in range (nVert):
      (self.Vertices[i]).visited = False

  # do the breadth first search in a graph
  def bfs (self, v):
    # create the Queue
    theQueue = Queue()

    #mark vertex v as visited and enqueue to the queue
    (self.Vertices[v]).visited = True
    print (self.Vertices[v])
    theQueue.enqueue(v)

    #visit other vertices
    while theQueue.is_empty() == False:
      #dequeue vertex from queue and make it the current vertex
      current = theQueue.dequeue()
      check = self.get_adj_unvisited_vertex(current)

      #get adjacent unvisited vertex
      while check != -1:
        (self.Vertices[check]).visited = True
        print (self.Vertices[check])  
        theQueue.enqueue(check)
        check = self.get_adj_unvisited_vertex(current)
    
    #the queue is empty, let us reset the flags
    nVert = len(self.Vertices)
    for i in range (nVert):
      (self.Vertices[i]).visited = False
    
    return

  # get edge weight between two vertices
  # return -1 if edge does not exist
  def get_edge_weight (self, fromVertexLabel, toVertexLabel):
    start = self.get_index(fromVertexLabel)
    finish = self.get_index(toVertexLabel)
    if self.Vertices[start][finish] != 0:
      return self.adjMat[start][finish]
    else:
      return -1

  # get a list of immediate neighbors (Vertex objects) that you 
  # can go to from a vertex return an empty list if there are none
  def get_neighbors (self, vertexLabel):
    neighbors = []
    index = self.get_index(vertexLabel)
    for x in range(len(self.adjMat[index])):
      if self.adjMat[index][x] > 0:
        neighbors.append(self.Vertices[x])
    return neighbors

  # get a copy of the list of Vertex objects
  def get_vertices (self):
    vertices = []
    for elements in self.Vertices:
      vertices.append(elements)
    return vertices

  # delete an edge from the adjacency matrix
  def delete_edge (self, fromVertexLabel, toVertexLabel):
    start = self.get_index(fromVertexLabel)
    finish = self.get_index(toVertexLabel)
    self.adjMat[start][finish] = 0

  # delete a vertex from the vertex list and all edges from and
  # to it in the adjacency matrix
  def delete_vertex (self, vertexLabel):
    deleteindex = self.get_index(vertexLabel)
    length = len(self.Vertices)
    for row in range(length):
      self.adjMat[row].remove(self.adjMat[row][deleteindex])
    self.adjMat.remove(self.adjMat[deleteindex])
      
    del self.Vertices[deleteindex]

  # determine if a directed graph has a cycle
  # this function should return a boolean and not print the result
  def has_cycle (self):
    theStack = Stack()
    for v in range(len(self.Vertices)):
      self.Vertices[v].visited = True
      theStack.push(v)

      while (not theStack.is_empty()):
        u = self.get_adj_unvisited_vertex(theStack.peek())

        if u == -1:
          u = theStack.pop()
        elif self.adjMat[u][v] == 1:
          return True
        else:
          self.Vertices[u].visited = True
          theStack.push(u)
      # the stack is empty, reset the flags
      nVert = len(self.Vertices)
      for i in range (nVert):
        (self.Vertices[i]).visited = False

    return False

  # calculate the indegree for each vertex and return a list
  def indegree(self):
    indegree = []
    for row in range(len(self.Vertices)):
      sum = 0
      for column in range(len(self.Vertices)):
        sum += self.adjMat[column][row]

      indegree.append(sum)
    
    return indegree

  # return a list of vertices after a topological sort
  # this function should not print the list
  def toposort (self):
    if self.has_cycle() == False:
      topoqueue = Queue()
      topolist = []
      indeg = self.indegree()
      set_zero = []

      for elem in range(len(indeg)):
        if indeg[elem] == 0 and self.Vertices[elem].visited == False:
          set_zero.append(elem)
          self.Vertices[elem].visited = True
          set_zero = sorted(set_zero)


      while len(set_zero) > 0:
        new_set_zero = []

        for elem in set_zero:
          topoqueue.enqueue(elem)
        for n in (set_zero):

          for col in range(len(indeg)):
            if self.adjMat[n][col] > 0:
              indeg[col] -= 1
              if indeg[col] == 0:
                new_set_zero.append(col)
        set_zero = sorted(new_set_zero)
      for elem in range(topoqueue.size()):
        m = topoqueue.dequeue()
        topolist.append(self.Vertices[m].label)

      return topolist


def main():
  letters = Graph()

  # open the file for reading
  in_file = open("topo.txt", "r")

  # read the number of Vertices
  num_vertices = int((in_file.readline()).strip())


  # add the vertices to the list
  for i in range(num_vertices):
    city = (in_file.readline()).strip()
    
    letters.add_vertex(city)

  # read the edges and add them to the adjacency matrix
  num_edges = int((in_file.readline()).strip())


  for i in range(num_edges):
    edge = (in_file.readline()).strip()

    edge = edge.split()
    start = letters.get_index(edge[0])
    finish = letters.get_index(edge[1])
    weight = 1

    letters.add_directed_edge(start, finish, weight)


  topo = letters.toposort()
  print(topo)

  # close the file
  in_file.close()


main()
